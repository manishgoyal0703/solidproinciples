Design patterns: 

	Creational: Patterns deal with the process of creation of the objects of classes.
		1. Builder
		2. Simple factory
		3. Factory method
		4. Prototype
		5. Singleton
		6. Abstract factory
		7. Object pool
	Structural: Patterns deal with how classes and objects are arranged and composed.
	Behavioural: Patterns describe how classes and objects interact and communicate with each other.
	
	
	
1. Builder : we have a complex process to construct an object involving multiple steps, then builder design pattern can help us.
			In Builder we remove the logic related to object construction from "client" code & abstract it in separate class.
			
			Role: 
				Builder: provide interface for creating parts of the product.
				ConcreteBuilder: Construct parts & assembles final product. Keeps track of product it creates.
				Director: Uses builder to construct object. knows the steps & their sequence to build product.
				Product: Final complex object that we want to create.
			
			Ex: Constructing a Immutable class where we don't know the sequence of parameter needs to be passed.
				Constructing a user class where we need to construct the address class first.
				Real life Example: StringBuilder, Calender.builder
				
				
				
2. Simple factory: Here we simply move the instantiation logic to a separate class and most commonly to a static method of this class.
					It's simply a method that encapsulates object instantiation.
					Ex: if(pudding) provide pudding object else if(cake) provide cake object.
					Real life Example: java.text.NumberFormat class has getInstance method
					
					Pitfalls: Start with simple factory then evolve into factory method design pattern.
					
					
3. Factory method: Most versatile design pattern, when we want to move the object creation logic from our code to a separate class.
					We use this pattern when we do not know in advance which class we may need to instantiate beforehand 
					& also to allow new classes to be added to system and handle their creation without affecting client code.
					We let subclasses decide which object to instantiate by overriding the factory method.
					Ex:template method and abstract factory makes use of factory method design pattern. java.util.collection has an 
					abstract method called iterator().
					
					pitfalls: you need to start from beginning. It's not easy to refactor existing code into factory method pattern.
					More complex to implement. 
					
4. 	Prototype : 
					
					
					


				
				
				
	